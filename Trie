#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long
#define FASTIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define inf 1e18
#define ff first
#define ss second
#define lb lower_bound
#define ub upper_bound
#define bs binary_search
#define mod 1000000007
#define pb push_back
#define all(s) s.begin(),s.end()
#define pie 3.14159265358979323846
#define fr(i,a,b) for(ll i=a;i<b;i++)
#define frr(i,a,b) for(ll i=b-1;i>=a;i--)
#define gcd __gcd
#define con continue
#define pii pair<ll,ll>

struct TrieNode{
    TrieNode* children[26];
    bool isEndOfWord;

    TrieNode(){
        for(int i=0;i<26;i++){
            children[i]=nullptr;
        }
        isEndOfWord=false;
    }
};

class Trie {
public:
    TrieNode* root;

    Trie(){
        root=new TrieNode();
    }

    void insert(string word){
        TrieNode* node=root;
        for(auto ch:word){
            int index=ch-'a';
            if(node->children[index]==nullptr){
                node->children[index]=new TrieNode();
            }
            node=node->children[index];
        }
        node->isEndOfWord=true;
    }

    bool search(string word){
        TrieNode* node=root;
        for(auto ch:word){
            int index=ch-'a';
            if(node->children[index]==nullptr){
                return false;
            }
            node=node->children[index];
        }
        return node->isEndOfWord;
    }

    bool prefixSearch(string word){
        TrieNode* node=root;
        for(auto ch:word){
            int index=ch-'a';
            if(node->children[index]==nullptr)return false;
            node=node->children[index];
        }
        return true;
    }
};

signed main(){
    FASTIO;
    int tt;cin>>tt;
    while(tt--){
        Trie trie;
        trie.insert("apple");
        trie.insert("banana");
        trie.insert("hey");

        cout<<trie.search("hey");
        cout<<trie.search("hello");
        cout<<trie.prefixSearch("app");
        cout<<trie.prefixSearch("ey");
    }
}

